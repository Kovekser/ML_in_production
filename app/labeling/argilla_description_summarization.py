import argilla as rg
from csv import DictReader
from typing import List, Optional
from app.labeling.argilla_base_labeling import ArgillaBaseLabelClient
# from app.utils import parse_command_line_argilla, ArgillaLabelParams
import ast
from bs4 import BeautifulSoup
import urllib3
import pandas as pd
from app.config import config
import random
from pathlib import Path
import datetime

# args: ArgillaLabelParams = parse_command_line_argilla()

user_agent_list = [
        "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_5) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/13.1.1 "
        "Safari/605.1.15",
        "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:77.0) Gecko/20100101 Firefox/77.0",
        "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.97 "
        "Safari/537.36",
        "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.97 "
        "Safari/537.36",
    ]


class ArgillaSummarizationClient(ArgillaBaseLabelClient):
    def __init__(self, api_url: str, api_key: str, workspace: str):
        super().__init__(api_url, api_key, workspace)

    @property
    def dataset_settings(self):

        return rg.Settings(
            guidelines="Summarize the text provided. There are two sources of the text: \n"
                       "- the first one is the description of the company's main economic activity (KBAPI),\n"
                       "- the second one is the text scraped from the company's homepage (Homepage text) \n"
                       "The goal is to create short and meaningful description summary about the main economic activity"
                       "of the company, investment insights, location etc. Only provided text should be used. \n"
                       "On the right side panel there is suggestion generated by ChatGPT model. Feel free to edit it. "
                       "After you finish, click on the 'Submit' button.",
            fields=[
                rg.TextField(
                    name="company_descriptions",
                    title="Text of entites descriptions",
                    use_markdown=False,
                )
            ],
            questions=[
                rg.TextQuestion(
                    name="summary",
                    title="Summarize the text",
                    required=True,
                    description="Summarize multiple descriptions of the company's main economic activity",
                )
            ],
            metadata=[
                rg.TermsMetadataProperty(
                    name="entity_name",
                    title="Entity name",
                ),
                rg.TermsMetadataProperty(
                    name="homepage",
                    title="Homepage",
                ),
            ]
        )

    def create_records(self, filename: str):
        records = []
        with open(filename, 'r', newline='', encoding='utf-8') as f:
            reader = DictReader(f, delimiter=";")
            for row in reader:
                x = rg.Record(
                    fields={
                        "company_descriptions": ast.literal_eval(row["descriptions"]),
                    },
                )
                records.append(x)
        return records

    @staticmethod
    def create_suggestion(openai_suggestion: str) -> rg.Suggestion:
        print(f"Creating suggestions {openai_suggestion}")
        return rg.Suggestion(
            question_name="summary",
            value=openai_suggestion,
            agent="openai",
            type="model",
        )

    def create_records_with_suggestions(self, filename: str, dataset_name, num_of_records: Optional[int] = None):
        records = []
        df = pd.read_csv(filename, header=0, index_col=0, delimiter=";")
        for index, row in df.iterrows():
            descriptions_raw = ast.literal_eval(row["descriptions"])
            homepage_text = None
            try:
                homepage_text = self.get_homepage_text(row["homepage"])
                descriptions_raw.append(homepage_text)
            except Exception as e:
                print(f"Failed to get homepage text for {row['homepage']}: {e}")
                pass
            descriptions = [self.pre_process_text(description) for description in descriptions_raw]
            suggestion = self.openai_client.generate_text_summary(descriptions, row["entity_name"])
            r = rg.Record(
                fields={
                    "company_descriptions": f"KBAPI: {descriptions_raw[0]} \n\n Homepage text: {homepage_text}",
                },
                suggestions=[self.create_suggestion(suggestion)],
                metadata={"entity_name": row["entity_name"], "homepage": row["homepage"]},
            )
            try:
                self.upload_records(dataset_name, [r])
                records.append(r)
            except Exception as e:
                print(f"Error uploading record: {r}")
                print(f"Error: {e}")
                continue
            print(f"Processed {len(records)} records")
            if num_of_records and len(records) == num_of_records:
                break
        return records

    @staticmethod
    def get_homepage_text(homepage_url: str) -> str:
        response = urllib3.request(
            "GET",
            homepage_url,
            headers={"User-Agent": random.choice(user_agent_list)},
        )
        homepage_bs4 = BeautifulSoup(response.data, 'html.parser')
        sentences = {item.strip() for item in homepage_bs4.get_text().split("\n") if item.strip()}
        for item in homepage_bs4.find_all("meta"):
            if item.get("content"):
                sentences.add(item.get("content"))
        return "\n".join([sentence for sentence in sentences if len(sentence.split()) > 3])


def get_argilla_client():
    return ArgillaSummarizationClient(
        api_url=config.ARGILLA.HOST,
        api_key=config.ARGILLA.API_KEY,
        workspace=config.ARGILLA.WORKSPACE,
    )


def upload_records(
    upload_file: str,
    dataset_name: str,
    num_of_records: Optional[int] = None,
    suggestion: Optional[bool] = False
):
    client = get_argilla_client()
    print(f"Client was created")
    if suggestion:
        records = client.create_records(upload_file)
        client.upload_records(dataset_name, records)
    else:
        records = client.create_records_with_suggestions(upload_file, dataset_name, num_of_records)
    return records


def download_records(
    dataset_name: str,
    download_filename: Optional[str] = None,
    download_path: Optional[Path] = None,
):
    client = get_argilla_client()
    if download_filename:
        client.download_records_json(dataset_name, f"{dataset_name}_processed_{datetime.datetime.now().date()}.json")
    elif download_path:
        client.download_records_dataset(dataset_name, download_path)
